# PY32F0xx target configuration
# Corrected and optimized based on official datasheet Rev1.1
# https://download.py32.org/Datasheet/zh-CN/PY32F002A%E7%B3%BB%E5%88%97%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C_Rev1.1.pdf
# Add by MoeCinnamo

#
# py32 devices support SWD transports and recommend.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME py32f0xx
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 3KB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0xC00
}

# Allow overriding the Flash bank size
if { [info exists FLASH_SIZE] } {
    set _FLASH_SIZE $FLASH_SIZE
} else {
    # By default, such as Py32f002a, there is 20KB
    set _FLASH_SIZE 0x5000
}

# jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x4ba00477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# flash size will be probed
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME puyaf0x 0x08000000 $_FLASH_SIZE 0 0 $_TARGETNAME

# adapter speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
adapter speed 1000

adapter srst delay 100

reset_config srst_nogate

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

proc py32f0xx_default_reset_start {} {
    # Reset clock is HSI (8 MHz)
    adapter speed 1000
}

proc py32f0xx_default_examine_end {} {
    # Enable debug during low power modes (uses more power)
    mmw 0x40015804 0x00000006 0  ;# DBGMCU_CR |= DBG_STANDBY | DBG_STOP
    
    # Stop watchdog counters during halt
    mmw 0x40015808 0x00001800 0  ;# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
}

proc py32f0xx_default_reset_init {} {
    # Configure PLL to boost clock to HSI x 6 (48 MHz)
	mww 0x40021004 0x00100000   ;# RCC_CFGR[PLLMUL] = 0b1100 → ×6
    mmw 0x40021000 0x01000000 0 ;# RCC_CR |= PLLON (Turn on PLL)
    mww 0x40022000 0x00000011   ;# FLASH_ACR = LATENCY=1, PRFTBE=1
	sleep 10                    ;# Wait for PLL to lock
	mmw 0x40021004 0x00000002 0 ;# RCC_CFGR[SW] = 0b10

	# Boost JTAG frequency
	adapter speed 8000
}

proc py32f0xx_default_flash_init {} {
    # Flash init configuration
    flash protect 0 0 last off
}

# Set event handlers
$_TARGETNAME configure -event examine-end { py32f0xx_default_examine_end }
$_TARGETNAME configure -event reset-start { py32f0xx_default_reset_start }
$_TARGETNAME configure -event reset-init { 
    py32f0xx_default_reset_init
    py32f0xx_default_flash_init
}